// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Warehouse {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  location           String?
  warehouseType      String
  description        String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  AddStockAdjustment AddStockAdjustment[] 
  Item               Item[]
}

model AddStockAdjustment {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber String
  addStockQty     String
  description     String?
  warehouse       Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade) // Enable cascading delete
  warehouseId     String    @db.ObjectId
  item            Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId          String    @db.ObjectId
}
model TransferStockAdjustment {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber  String
  transferStockQty String
  description      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  item             Item     @relation(fields: [itemId], references: [id], onDelete: Cascade) // Enable cascading delete
  itemId           String   @db.ObjectId
}


model Item {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?

  qty          String
  buyingPrice  String
  sellingPrice String
  supplier     Supplier @relation(fields: [supplierId], references: [id])
  supplierId   String   @db.ObjectId

  imageUrl   String?
  taxRate    String
  dimensions String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt // Optional

  warehouse               Warehouse                 @relation(fields: [warehouseId], references: [id]) // Relation with Warehouse
  warehouseId             String                    @db.ObjectId // Added warehouseId for the warehouse relation
  TransferStockAdjustment TransferStockAdjustment[]
  AddStockAdjustment      AddStockAdjustment[]
  InvoiceItem             InvoiceItem[]
}

model Supplier {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  phone         String?
  email         String?
  address       String?
  contactPerson String?
  supplierCode  String   @unique
  paymentTerms  String?
  taxId         String?
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Item          Item[]
}

model Invoice {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  customerName String
  date         DateTime      @default(now())
  description  String?
  invoiceItems InvoiceItem[]
  totalCost    String
  totalSale    String
  totalProfit  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model InvoiceItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String  @db.ObjectId
  item      Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String  @db.ObjectId

  qty          String // Quantity of the item
  buyingPrice  String // Price per item from Item model at purchase
  sellingPrice String // Price per item from Item model at sale
  profit       String // Calculated profit per item based on (sellingPrice - buyingPrice) * qty
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
